import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import image.BasicImage;
import image.BasicPixel;
import image.CustomImage;
import image.CustomPixel;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.Before;
import org.junit.Test;

/**
 * Test class for exclusive testing on the sharpenConversion method.
 */
public class SharpenTest {

  private CustomImage customImage1;
  private CustomImage customImage2;
  private CustomImage customImage3;
  private CustomImage customImage4;

  // Helper method to create a row of pixels
  private List<CustomPixel> createPixelRow(int r, int g, int b, int a, int length) {
    return Collections.nCopies(length, new BasicPixel(r, g, b, a));
  }

  // Sets up the model and the matrices for testing
  @Before
  public void setUp() {

    // Set up a 4x4 matrix for testing
    List<List<CustomPixel>> pixelList1 = new ArrayList<>(List.of(
        createPixelRow(125, 200, 45, 255, 4),
        createPixelRow(0, 0, 0, 255, 4),
        createPixelRow(255, 255, 255, 255, 4),
        createPixelRow(50, 50, 50, 255, 4)
    ));
    customImage1 = new BasicImage(pixelList1);

    // Set up a 4x5 matrix for testing
    List<List<CustomPixel>> pixelList2 = new ArrayList<>(List.of(
        createPixelRow(100, 150, 200, 255, 5),
        createPixelRow(30, 60, 90, 255, 5),
        createPixelRow(10, 20, 30, 255, 5),
        createPixelRow(200, 180, 160, 255, 5)
    ));
    customImage2 = new BasicImage(pixelList2);

    // Set up a 5x4 matrix for testing
    List<List<CustomPixel>> pixelList3 = new ArrayList<>(List.of(
        createPixelRow(5, 10, 15, 255, 4),
        createPixelRow(60, 70, 80, 255, 4),
        createPixelRow(100, 120, 140, 255, 4),
        createPixelRow(200, 220, 240, 255, 4),
        createPixelRow(15, 25, 35, 255, 4)
    ));
    customImage3 = new BasicImage(pixelList3);

    // Set up a 5x4 matrix for testing
    List<List<CustomPixel>> pixelList4 = new ArrayList<>(List.of(
        createPixelRow(10, 20, 30, 255, 4),
        createPixelRow(50, 75, 100, 255, 4),
        createPixelRow(100, 150, 200, 255, 4),
        createPixelRow(200, 220, 240, 255, 4),
        createPixelRow(15, 25, 35, 255, 4)
    ));
    customImage4 = new BasicImage(pixelList4);
  }

  // Testing Sharpen Component (should be exact images) on 4x4 matrices
  @Test
  public void testSharpen1() {
    CustomImage imagesRes = customImage1.sharpenConversion(100);
    assertNotNull(imagesRes);
    assertEquals(customImage1.getHeight(), imagesRes.getHeight());
    assertEquals(customImage1.getWidth(), imagesRes.getWidth());

    //Expected Result
    List<List<List<Integer>>> expectedResult = Arrays.asList(
        Arrays.asList(
            Arrays.asList(62, 100, 22, 255),
            Arrays.asList(47, 75, 17, 255),
            Arrays.asList(47, 75, 17, 255),
            Arrays.asList(16, 25, 6, 255)
        ),
        Arrays.asList(
            Arrays.asList(255, 255, 255, 255),
            Arrays.asList(242, 212, 255, 255),
            Arrays.asList(242, 212, 255, 255),
            Arrays.asList(2, 0, 22, 255)
        ),
        Arrays.asList(
            Arrays.asList(188, 188, 188, 255),
            Arrays.asList(151, 151, 151, 255),
            Arrays.asList(151, 151, 151, 255),
            Arrays.asList(38, 38, 38, 255)
        ),
        Arrays.asList(
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255)
        )
    );

    for (int i = 0; i < imagesRes.getHeight(); i++) {
      for (int j = 0; j < imagesRes.getWidth(); j++) {
        assertEquals(expectedResult.get(i).get(j), imagesRes.get(i, j).getPixelRGBA());
      }
    }
  }

  // Testing Sharpen Component (should be exact images) on 4x5 matrices
  @Test
  public void testSharpen2() {
    CustomImage imagesRes = customImage2.sharpenConversion(100);
    assertNotNull(imagesRes);
    assertEquals(customImage2.getHeight(), imagesRes.getHeight());
    assertEquals(customImage2.getWidth(), imagesRes.getWidth());

    //Expected Result
    List<List<List<Integer>>> expectedResult = Arrays.asList(
        Arrays.asList(
            Arrays.asList(87, 149, 212, 255),
            Arrays.asList(72, 124, 176, 255),
            Arrays.asList(72, 124, 176, 255),
            Arrays.asList(72, 124, 176, 255),
            Arrays.asList(17, 27, 36, 255)
        ),
        Arrays.asList(
            Arrays.asList(2, 19, 31, 255),
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255)
        ),
        Arrays.asList(
            Arrays.asList(248, 221, 192, 255),
            Arrays.asList(219, 190, 158, 255),
            Arrays.asList(219, 190, 158, 255),
            Arrays.asList(219, 190, 158, 255),
            Arrays.asList(20, 12, 2, 255)
        ),
        Arrays.asList(
            Arrays.asList(98, 86, 74, 255),
            Arrays.asList(72, 62, 51, 255),
            Arrays.asList(72, 62, 51, 255),
            Arrays.asList(72, 62, 51, 255),
            Arrays.asList(23, 19, 14, 255)
        )
    );

    for (int i = 0; i < imagesRes.getHeight(); i++) {
      for (int j = 0; j < imagesRes.getWidth(); j++) {
        assertEquals(expectedResult.get(i).get(j), imagesRes.get(i, j).getPixelRGBA());
      }
    }
  }

  // Testing Sharpen Component (should be exact images) on 5x4 matrices
  @Test
  public void testSharpen3() {
    CustomImage imagesRes = customImage3.sharpenConversion(100);
    assertNotNull(imagesRes);
    assertEquals(customImage3.getHeight(), imagesRes.getHeight());
    assertEquals(customImage3.getWidth(), imagesRes.getWidth());

    //Expected Result
    List<List<List<Integer>>> expectedResult = Arrays.asList(
        Arrays.asList(
            Arrays.asList(77, 91, 106, 255),
            Arrays.asList(70, 82, 95, 255),
            Arrays.asList(70, 82, 95, 255),
            Arrays.asList(9, 10, 12, 255)
        ),
        Arrays.asList(
            Arrays.asList(155, 182, 213, 255),
            Arrays.asList(136, 158, 185, 255),
            Arrays.asList(136, 158, 185, 255),
            Arrays.asList(21, 22, 26, 255)
        ),
        Arrays.asList(
            Arrays.asList(255, 255, 255, 255),
            Arrays.asList(242, 255, 255, 255),
            Arrays.asList(242, 255, 255, 255),
            Arrays.asList(24, 27, 28, 255)
        ),
        Arrays.asList(
            Arrays.asList(94, 111, 129, 255),
            Arrays.asList(56, 66, 78, 255),
            Arrays.asList(56, 66, 78, 255),
            Arrays.asList(3, 1, 0, 255)
        ),
        Arrays.asList(
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255)
        )
    );

    for (int i = 0; i < imagesRes.getHeight(); i++) {
      for (int j = 0; j < imagesRes.getWidth(); j++) {
        assertEquals(expectedResult.get(i).get(j), imagesRes.get(i, j).getPixelRGBA());

      }
    }
  }


  @Test
  public void testSharpenPercentage1() {
    int percentage = 20;
    CustomImage imageRes = customImage4.sharpenConversion(percentage);

    // Ensure the result image is not null and has the correct dimensions
    assertNotNull(imageRes);
    assertEquals(customImage4.getHeight(), imageRes.getHeight());
    assertEquals(customImage4.getWidth(), imageRes.getWidth());

    //Expected Result
    List<List<List<Integer>>> expectedResult = Arrays.asList(
        Arrays.asList(
            Arrays.asList(10, 20, 30, 255),
            Arrays.asList(10, 20, 30, 255),
            Arrays.asList(10, 20, 30, 255),
            Arrays.asList(10, 20, 30, 255)
        ),
        Arrays.asList(
            Arrays.asList(50, 75, 100, 255),
            Arrays.asList(50, 75, 100, 255),
            Arrays.asList(50, 75, 100, 255),
            Arrays.asList(50, 75, 100, 255)
        ),
        Arrays.asList(
            Arrays.asList(100, 150, 200, 255),
            Arrays.asList(100, 150, 200, 255),
            Arrays.asList(100, 150, 200, 255),
            Arrays.asList(100, 150, 200, 255)
        ),
        Arrays.asList(
            Arrays.asList(200, 220, 240, 255),
            Arrays.asList(200, 220, 240, 255),
            Arrays.asList(200, 220, 240, 255),
            Arrays.asList(200, 220, 240, 255)
        ),
        Arrays.asList(
            Arrays.asList(15, 25, 35, 255),
            Arrays.asList(15, 25, 35, 255),
            Arrays.asList(15, 25, 35, 255),
            Arrays.asList(15, 25, 35, 255)
        )
    );

    for (int i = 0; i < imageRes.getHeight(); i++) {
      for (int j = 0; j < imageRes.getWidth(); j++) {
        assertEquals(expectedResult.get(i).get(j), imageRes.get(i, j).getPixelRGBA());

      }
    }


  }

  @Test
  public void testSharpenPercentage2() {
    int percentage = 40;
    CustomImage imageRes = customImage4.sharpenConversion(percentage);

    // Ensure the result image is not null and has the correct dimensions
    assertNotNull(imageRes);
    assertEquals(customImage4.getHeight(), imageRes.getHeight());
    assertEquals(customImage4.getWidth(), imageRes.getWidth());

    //Expected Result
    List<List<List<Integer>>> expectedResult = Arrays.asList(
        Arrays.asList(
            Arrays.asList(66, 103, 139, 255),
            Arrays.asList(10, 20, 30, 255),
            Arrays.asList(10, 20, 30, 255),
            Arrays.asList(10, 20, 30, 255)
        ),
        Arrays.asList(
            Arrays.asList(147, 219, 255, 255),
            Arrays.asList(50, 75, 100, 255),
            Arrays.asList(50, 75, 100, 255),
            Arrays.asList(50, 75, 100, 255)
        ),
        Arrays.asList(
            Arrays.asList(255, 255, 255, 255),
            Arrays.asList(100, 150, 200, 255),
            Arrays.asList(100, 150, 200, 255),
            Arrays.asList(100, 150, 200, 255)
        ),
        Arrays.asList(
            Arrays.asList(94, 105, 113, 255),
            Arrays.asList(200, 220, 240, 255),
            Arrays.asList(200, 220, 240, 255),
            Arrays.asList(200, 220, 240, 255)
        ),
        Arrays.asList(
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(15, 25, 35, 255),
            Arrays.asList(15, 25, 35, 255),
            Arrays.asList(15, 25, 35, 255)
        )
    );

    for (int i = 0; i < imageRes.getHeight(); i++) {
      for (int j = 0; j < imageRes.getWidth(); j++) {
        assertEquals(expectedResult.get(i).get(j), imageRes.get(i, j).getPixelRGBA());

      }
    }


  }

  @Test
  public void testSharpenPercentage3() {
    int percentage = 60;
    CustomImage imageRes = customImage4.sharpenConversion(percentage);

    // Ensure the result image is not null and has the correct dimensions
    assertNotNull(imageRes);
    assertEquals(customImage4.getHeight(), imageRes.getHeight());
    assertEquals(customImage4.getWidth(), imageRes.getWidth());

    //Expected Result
    List<List<List<Integer>>> expectedResult = Arrays.asList(
        Arrays.asList(
            Arrays.asList(66, 103, 139, 255),
            Arrays.asList(59, 92, 124, 255),
            Arrays.asList(10, 20, 30, 255),
            Arrays.asList(10, 20, 30, 255)
        ),
        Arrays.asList(
            Arrays.asList(147, 219, 255, 255),
            Arrays.asList(128, 190, 254, 255),
            Arrays.asList(50, 75, 100, 255),
            Arrays.asList(50, 75, 100, 255)
        ),
        Arrays.asList(
            Arrays.asList(255, 255, 255, 255),
            Arrays.asList(245, 255, 255, 255),
            Arrays.asList(100, 150, 200, 255),
            Arrays.asList(100, 150, 200, 255)
        ),
        Arrays.asList(
            Arrays.asList(94, 105, 113, 255),
            Arrays.asList(56, 57, 54, 255),
            Arrays.asList(200, 220, 240, 255),
            Arrays.asList(200, 220, 240, 255)
        ),
        Arrays.asList(
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(15, 25, 35, 255),
            Arrays.asList(15, 25, 35, 255)
        )
    );

    for (int i = 0; i < imageRes.getHeight(); i++) {
      for (int j = 0; j < imageRes.getWidth(); j++) {
        assertEquals(expectedResult.get(i).get(j), imageRes.get(i, j).getPixelRGBA());
      }
    }

  }

  @Test
  public void testSharpenPercentage4() {
    int percentage = 80;
    CustomImage imageRes = customImage4.sharpenConversion(percentage);

    // Ensure the result image is not null and has the correct dimensions
    assertNotNull(imageRes);
    assertEquals(customImage4.getHeight(), imageRes.getHeight());
    assertEquals(customImage4.getWidth(), imageRes.getWidth());

    //Expected Result
    List<List<List<Integer>>> expectedResult = Arrays.asList(
        Arrays.asList(
            Arrays.asList(66, 103, 139, 255),
            Arrays.asList(59, 92, 124, 255),
            Arrays.asList(59, 92, 124, 255),
            Arrays.asList(10, 20, 30, 255)
        ),
        Arrays.asList(
            Arrays.asList(147, 219, 255, 255),
            Arrays.asList(128, 190, 254, 255),
            Arrays.asList(128, 190, 254, 255),
            Arrays.asList(50, 75, 100, 255)
        ),
        Arrays.asList(
            Arrays.asList(255, 255, 255, 255),
            Arrays.asList(245, 255, 255, 255),
            Arrays.asList(245, 255, 255, 255),
            Arrays.asList(100, 150, 200, 255)
        ),
        Arrays.asList(
            Arrays.asList(94, 105, 113, 255),
            Arrays.asList(56, 57, 54, 255),
            Arrays.asList(56, 57, 54, 255),
            Arrays.asList(200, 220, 240, 255)
        ),
        Arrays.asList(
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(15, 25, 35, 255)
        )
    );

    for (int i = 0; i < imageRes.getHeight(); i++) {
      for (int j = 0; j < imageRes.getWidth(); j++) {
        assertEquals(expectedResult.get(i).get(j), imageRes.get(i, j).getPixelRGBA());
      }
    }
  }

  @Test
  public void testSharpenPercentage5() {
    int percentage = 100;
    CustomImage imageRes = customImage4.sharpenConversion(percentage);

    // Ensure the result image is not null and has the correct dimensions
    assertNotNull(imageRes);
    assertEquals(customImage4.getHeight(), imageRes.getHeight());
    assertEquals(customImage4.getWidth(), imageRes.getWidth());

    //Expected Result
    List<List<List<Integer>>> expectedResult = Arrays.asList(
        Arrays.asList(
            Arrays.asList(66, 103, 139, 255),
            Arrays.asList(59, 92, 124, 255),
            Arrays.asList(59, 92, 124, 255),
            Arrays.asList(7, 12, 17, 255)
        ),
        Arrays.asList(
            Arrays.asList(147, 219, 255, 255),
            Arrays.asList(128, 190, 254, 255),
            Arrays.asList(128, 190, 254, 255),
            Arrays.asList(17, 24, 32, 255)
        ),
        Arrays.asList(
            Arrays.asList(255, 255, 255, 255),
            Arrays.asList(245, 255, 255, 255),
            Arrays.asList(245, 255, 255, 255),
            Arrays.asList(26, 29, 31, 255)
        ),
        Arrays.asList(
            Arrays.asList(94, 105, 113, 255),
            Arrays.asList(56, 57, 54, 255),
            Arrays.asList(56, 57, 54, 255),
            Arrays.asList(3, 0, 0, 255)
        ),
        Arrays.asList(
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255),
            Arrays.asList(0, 0, 0, 255)
        )
    );

    for (int i = 0; i < imageRes.getHeight(); i++) {
      for (int j = 0; j < imageRes.getWidth(); j++) {
        assertEquals(expectedResult.get(i).get(j), imageRes.get(i, j).getPixelRGBA());
      }
    }

  }


}
